[metadata]

name = marrow.mailer
description = A light-weight, modular, message representation and mail delivery framework for Python.
long_description = file: README.md
long_description_content_type = text/markdown
license = MIT
license_file = LICENSE.txt
author = Alice Bevan-McGregor
author_email = alice@gothcandy.com
url = https://github.com/marrow/mailer
project_urls =
	Source code = https://github.com/marrow/mailer
	Issue tracker = https://github.com/marrow/mailer/issues
keywords =
	email
	email-sender
	gae
	imap
	maildir
	mailgun
	mbox
	postmark
	sendgrid
	sendmail
	amazon-ses
	smtp
	attachment
classifiers =
	Development Status :: 5 - Production/Stable
	Environment :: Console
	Intended Audience :: Developers
	License :: OSI Approved :: MIT License
	Operating System :: OS Independent
	Programming Language :: Python
	Programming Language :: Python :: 3.7
	Programming Language :: Python :: 3.8
	Topic :: Software Development :: Libraries :: Python Modules
	Topic :: Utilities


[options]

packages = marrow.mailer
include_package_data = True
python_requires = >=3.7
zip_safe = False

setup_requires =
	setuptools-scm >= 1.7.0

install_requires =
	typeguard ~=2.3.0,<4.0
	marrow.package ~=2.0.1

tests_require =
	pytest
	pytest-cov
	pytest-flakes
	pytest-isort


[options.extras_require]

development =
	pytest
	pytest-cov
	pytest-flakes
	pytest-isort
	pytest-runner
	pre-commit
	bandit
	rope
	mypy

requests =
	requests


[options.package_data]

* = *.txt, *.md
; marrow/mailer = py.typed


[options.entry_points]

marrow.mailer.manager =
	immediate = marrow.mailer.manager.immediate:ImmediateManager
	futures = marrow.mailer.manager.futures:FuturesManager
	dynamic = marrow.mailer.manager.dynamic:DynamicManager

marrow.mailer.transport =
	amazon = marrow.mailer.transport.ses:AmazonTransport
	mock = marrow.mailer.transport.mock:MockTransport
	smtp = marrow.mailer.transport.smtp:SMTPTransport
	mbox = marrow.mailer.transport.mbox:MailboxTransport
	mailbox = marrow.mailer.transport.mbox:MailboxTransport
	maildir = marrow.mailer.transport.maildir:MaildirTransport
	sendmail = marrow.mailer.transport.sendmail:SendmailTransport
	imap = marrow.mailer.transport.imap:IMAPTransport
	appengine = marrow.mailer.transport.gae:AppEngineTransport
	logging = marrow.mailer.transport.log:LoggingTransport
	postmark = marrow.mailer.transport.postmark:PostmarkTransport
	sendgrid = marrow.mailer.transport.sendgrid:SendgridTransport
	mailgun = marrow.mailer.transport.mailgun:MailgunTransport[requests]



[check]

metadata = 1
strict = 1


[clean]

build-base = .packaging/build
bdist-base = .packaging/dist


[build]

build-base = .packaging/build
parallel = 3


[sdist]

dist-dir = .packaging/release


[bdist]

bdist-base = .packaging/dist
dist-dir = .packaging/release


[bdist_wheel]

bdist-dir = .packaging/dist
dist-dir = .packaging/release


[wheel]

universal = 0


[mypy]

follow_imports = silent
ignore_missing_imports = True
strict_optional = True
warn_no_return = False
check_untyped_defs = True
allow_redefinition = True


[tool:isort]

line_length = 120
multi_line_output = 4
balanced_wrapping = True
indent='		'
sections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER

known_first_party =
	marrow
	web


[tool:pytest]

addopts =
	-l -r fEsxw
	--flakes
	--cov-report term-missing
	--cov-report xml
	--no-cov-on-fail
	--cov marrow.mailer
	--durations=5
	--color=yes
	--isort
	test

filterwarnings =
	default
	ignore::DeprecationWarning:isort.*

flakes-ignore =
	test/*.py UnusedImport
	test/*/*.py UnusedImport


[coverage:report]

exclude_lines =
	# Re-enable the standard pragma, since we override it.
	pragma: no( |-)?cov(er)?
	
	# Don't complain if non-runnable code isn't run:
	if 0:
	if False:
	if __name__ == .__main__.:
